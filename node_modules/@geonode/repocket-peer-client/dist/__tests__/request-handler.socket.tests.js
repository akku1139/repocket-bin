"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request_handler_socket_1 = require("../src/P2P/request-handler.socket");
// SzNiSnhkOVo=
//     CONNECT exp.notion.so:443 HTTP/1.1
// proxy-authorization: Basic cmVwb2NrZXRfdGNwX3NvY2tldF9zZXJ2ZXJfYXV0aC1yX3BpZC02NjM1YzYwMzhhODFjYzAwMTBmMThjYmM6NEt2WkdnVlQzMmNVSFZhMlhHajZ2U1FDSzNiSnhkOVo=
//     CONNECT spclient.wg.spotify.com:443 HTTP/1.1$proxy-authorization: Basic cmVwb2NrZXRfdGNwX3NvY2tldF9zZXJ2ZXJfYXV0aC1yX3BpZC02NjM1YzYwMzhhODFjYzAwMTBmMThjYmM6NEt2WkdnVlQzMmNVSFZhMlhHajZ2U1FDSzNiSnhkOVo=
//     CONNECT pushstream.tradingview.com:443 HTTP/1.1\r\nproxy-authorization: Basic cmVwb2NrZXRfdGNwX3NvY2tldF9zZXJ2ZXJfYXV0aC1yX3BpZC02NjM1YzYwMzhhODFjYzAwMTBmMThjYmM6NEt2WkdnVlQzMmNVSFZhMlhHajZ2U1FDSzNiSnhkOVo=
//     CONNECT telemetry.tradingview.com:443 HTTP/1.1\r\n$proxy-authorization: Basic cmVwb2NrZXRfdGNwX3NvY2tldF9zZXJ2ZXJfYXV0aC1yX3BpZC02NjM1YzYwMzhhODFjYzAwMTBmMThjYmM6NEt2WkdnVlQzMmNVSFZhMlhHajZ2U1FDSzNiSnhkOVo=
// CONNECT www.youtube.com:443 HTTP/1.1\r\nproxy-authorization: Basic cmVwb2NrZXRfdGNwX3NvY2tldF9zZXJ2ZXJfYXV0aC1yX3BpZC02NjM1YzYwMzhhODFjYzAwMTBmMThjYmM6NEt2WkdnVlQzMmNVSFZhMlhHajZ2U1FDSzNiSnhkOVo=
// "CONNECT 52.46.155.106:443 HTTP/1.1\r\nHost: 52.46.155.106:443"
// CONNECT [2600:9000:225a:be00:1b:5d9a:8ad3:e041]:443 HTTP/1.1\r\nHost: [2600:9000:225a:be00:1b:5d9a:8ad3:e041]:443
// CONNECT [2600:1901:0:38d7::]:80 HTTP/1.1\r\nHost: [2600:1901:0:38d7::]:80
// CONNECT [2a03:2880:f136:83:face:b00c:0:25de]:443 HTTP/1.1\r\nHost: [2a03:2880:f136:83:face:b00c:0:25de]:443
// CONNECT [2607:ae80:192:1::176]:443 HTTP/1.1\r\nHost: [2607:ae80:192:1::176]:443
// "CONNECT [2a04:4e42:8e::396]:443 HTTP/1.1\r\nHost: [2a04:4e42:8e::396]:443"
// CONNECT [2606:4700:20::ac43:4513]:443 HTTP/1.1\r\nHost: [2606:4700:20::ac43:4513]:443
// "CONNECT api.ipify.org:443 HTTP/1.1\r\nHost: api.ipify.org:443\r\nUser-Agent: curl/8.4.0\r\n\r\n\n\r\n"
// "GET http://ip-api.com/json HTTP/1.1\r\nHost: ip-api.com\r\nUser-Agent: curl/8.4.0\r\nAccept: */*\r\n\r\n\n\r\n"
// "GET http://ip-api.com/json HTTP/1.0\r\nHost: ip-api.com\r\nUser-Agent: curl/8.4.0\r\nAccept: */*\r\n\r\n\n\r\n"
const handlerSocket = new request_handler_socket_1.RequestHandlerSocket('0.0.0.0', 80, 'asdfasdf', 'test123');
describe('RequestHandlerSocket tests', () => {
    test("CONNECT beacons.gcp.gvt2.com:443 HTTP/1.1\r\nproxy-authorization: Basic cmVwb2NrZXR", () => {
        const data = "CONNECT beacons.gcp.gvt2.com:443 HTTP/1.1\r\nproxy-authorization: Basic cmVwb2NrZXR";
        const results = handlerSocket.parseHttpRequest(data);
        expect(results?.method).toBe('CONNECT');
        expect(results?.httpVersion).toBe('HTTP/1.1');
        expect(results?.host).toBe('beacons.gcp.gvt2.com');
        expect(results?.port).toBe("443");
    });
    test("POST / HTTP/1.1\r\nHost: ocsp.digicert.com", () => {
        const data = "POST / HTTP/1.1\r\nHost: ocsp.digicert.com\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:126.0) Gecko/20100101 Firefox/126.0\r\nAccept: */*\r\nAccept-Language: en-GB,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nContent-Type: application/ocsp-request\r\nContent-Length: 83\r\nConnection: keep-alive\r\n0Q0O0M0K0I0\t+[1¦ÐÔ.E?»ØÛ5D]+ëS¯õq=£s®û\\S©}aïFñJÃ¥f";
        const results = handlerSocket.parseHttpRequest(data);
        expect(results?.method).toBe('POST');
        expect(results?.httpVersion).toBe('HTTP/1.1');
        expect(results?.host).toBe('ocsp.digicert.com');
        expect(results?.port).toBe("80");
    });
    test("CONNECT telemetry.tradingview.com:443 HTTP/1.1\r\n$proxy-authorization: Basic cmVwb2NrZXR", () => {
        const data = "CONNECT telemetry.tradingview.com:443 HTTP/1.1\r\n$proxy-authorization: Basic cmVwb2NrZXR";
        const results = handlerSocket.parseHttpRequest(data);
        expect(results?.method).toBe('CONNECT');
        expect(results?.httpVersion).toBe('HTTP/1.1');
        expect(results?.host).toBe('telemetry.tradingview.com');
        expect(results?.port).toBe("443");
    });
    test("GET http://ip-api.com/json HTTP/1.1\r\nHost: ip-api.com\r\nUser-Agent: curl/8.4.0\r\nAccept: */*\r\n\r\n\n\r\n", () => {
        const data = "GET http://ip-api.com/json HTTP/1.1\r\nHost: ip-api.com\r\nUser-Agent: curl/8.4.0\r\nAccept: */*\r\n\r\n\n\r\n";
        const results = handlerSocket.parseHttpRequest(data);
        expect(results?.method).toBe('GET');
        expect(results?.httpVersion).toBe('HTTP/1.1');
        expect(results?.host).toBe('ip-api.com');
        expect(results?.port).toBe("80");
    });
    test("CONNECT api.ipify.org:443 HTTP/1.1\r\nHost: api.ipify.org:443\r\nUser-Agent: curl/8.4.0\r\n\r\n\n\r\n", () => {
        const data = "CONNECT api.ipify.org:443 HTTP/1.1\r\nHost: api.ipify.org:443\r\nUser-Agent: curl/8.4.0\r\n\r\n\n\r\n";
        const results = handlerSocket.parseHttpRequest(data);
        expect(results?.method).toBe('CONNECT');
        expect(results?.httpVersion).toBe('HTTP/1.1');
        expect(results?.host).toBe('api.ipify.org');
        expect(results?.port).toBe("443");
    });
    test('"CONNECT [2a04:4e42:8e::396]:443 HTTP/1.1\\r\\nHost: [2a04:4e42:8e::396]:443"', () => {
        const data = "CONNECT [2a04:4e42:8e::396]:443 HTTP/1.1\r\nHost: [2a04:4e42:8e::396]:443";
        const results = handlerSocket.parseHttpRequest(data);
        expect(results?.method).toBe('CONNECT');
        expect(results?.httpVersion).toBe('HTTP/1.1');
        expect(results?.host).toBe('2a04:4e42:8e::396');
        expect(results?.port).toBe("443");
    });
    test("CONNECT 52.46.155.106:443 HTTP/1.1\r\nHost: 52.46.155.106:443", () => {
        const data = "CONNECT 52.46.155.106:443 HTTP/1.1\r\nHost: 52.46.155.106:443";
        const results = handlerSocket.parseHttpRequest(data);
        expect(results?.method).toBe('CONNECT');
        expect(results?.httpVersion).toBe('HTTP/1.1');
        expect(results?.host).toBe('52.46.155.106');
        expect(results?.port).toBe("443");
    });
    test("CONNECT [2600:1901:0:38d7::]:80 HTTP/1.1\r\nHost: [2600:1901:0:38d7::]:80", () => {
        const data = "CONNECT [2600:1901:0:38d7::]:80 HTTP/1.1\r\nHost: [2600:1901:0:38d7::]:80";
        const results = handlerSocket.parseHttpRequest(data);
        expect(results?.method).toBe('CONNECT');
        expect(results?.httpVersion).toBe('HTTP/1.1');
        expect(results?.host).toBe('2600:1901:0:38d7::');
        expect(results?.port).toBe("80");
    });
    test("GET http://ip-api.com/json HTTP/1.0\r\nHost: ip-api.com\r\nUser-Agent: curl/8.4.0\r\nAccept: */*\r\n\r\n\n\r\n", () => {
        const data = "GET http://ip-api.com/json HTTP/1.0\r\nHost: ip-api.com\r\nUser-Agent: curl/8.4.0\r\nAccept: */*\r\n\r\n\n\r\n";
        const results = handlerSocket.parseHttpRequest(data);
        expect(results?.method).toBe('GET');
        expect(results?.httpVersion).toBe('HTTP/1.0');
        expect(results?.host).toBe('ip-api.com');
        expect(results?.port).toBe("80");
    });
});
