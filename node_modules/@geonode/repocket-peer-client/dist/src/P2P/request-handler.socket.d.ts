/// <reference types="node" />
/// <reference types="node" />
import net from 'net';
import EventEmitter from 'events';
import { TargetSocket } from './target.socket';
import { Socket5Handler } from './socks5/socks5.socket';
declare class ReqHandlerSocket extends net.Socket {
    uid?: number;
    retryConnectionCounter?: number;
    isBusy?: boolean;
    type?: 'main' | 'helper' | string;
}
export declare class RequestHandlerSocket {
    emitter: EventEmitter<[never]>;
    _ip: any;
    _port: any;
    _reqId: any;
    _peerId: any;
    socket: ReqHandlerSocket;
    targetSocket: TargetSocket | null;
    socks5targetSocket: Socket5Handler | null;
    private isSocks5Req;
    private isConnectedToSocketServer;
    private retriesConnectionCounter;
    private maxRetries;
    private delayBetweenRetries;
    private standBy;
    private standByWaitingMode;
    private shouldReconnect;
    constructor(ip: any, port: any, reqId: any, peerId: any, standBy?: boolean, standByWaitingMode?: boolean, shouldReconnect?: boolean);
    connect(): void;
    private connectToSocketServer;
    reset(): void;
    httpProtocolHandler(data: any, buffer: any): Promise<void>;
    private isReusableModeActive;
    _handleRead(data: any): Promise<void>;
    private markSocketAsFree;
    getStandByMode(): 0 | 1 | 2;
    isSocks5Request(buffer: any): boolean | undefined;
    onData(data: any): Promise<void>;
    retry(): Promise<void>;
    private shouldRetry;
    onError(error: any): void;
    onClose(hadError: any): void;
    end(): void;
    parseHttpRequest(data: any): {
        method: string;
        path: string;
        httpVersion: any;
        host: string;
        port: any;
    } | null;
    private parseHttpRequestByHeaders;
    private parseHttpVer10;
}
export {};
