import net from 'net';
import EventEmitter from 'events';
import { P2PEvents } from '../services/P2P.service';
import {writeToSocket} from "./helpers";

export class TargetSocket {
  emitter = new EventEmitter();
  socket: net.Socket;
  requestHandlerSocket: net.Socket;
  request;
  buffer;
  lastPacket;

  constructor(requestHandlerSocket: net.Socket, request, buffer) {
    this.requestHandlerSocket = requestHandlerSocket;
    this.request = request;
    this.buffer = buffer;
  }

  connect() {
    // RPLogger.log('handling HTTPS | HTTP');
    if (!this.request) return;

    const port = this.request['port'] != null ? this.request['port'] : 80;

    try {
      this.socket = new net.Socket();
      this.socket.setTimeout(15000); // was 10 before
      this.socket.setNoDelay(true);

      this.socket.on('connect', () => {
        // console.log('target socket connect');
      });
      // this.socket.on('data', (buffer) => this.onSocketDataEvent(buffer));
      this.socket.on('error', async (e) => this.onSocketErrorEvent(e));
      this.socket.on('close', async () => this.onSocketCloseEvent());
      this.socket.on('timeout', async () => this.onTimeout());

      // @ts-ignore
      this.socket.pipe(this.requestHandlerSocket, { end: false });
      this.socket.connect(port.toString(), this.request['host']);
    } catch (e) {
      console.log('e :', e);
      return;
    }

    if (this.isHttps()) {
      // console.log('trying to write to requestHandlerSocket')
      writeToSocket(this.requestHandlerSocket, `${this.request['httpVersion']} 200 Connection Established\r\n\r\n`)
      // this.requestHandlerSocket.write(
      //   `${this.request['httpVersion']} 200 Connection Established\r\n\r\n`
      // );
    }

    if (!this.isHttps()) {
      try {
        writeToSocket(this.socket, this.buffer)
        // this.socket.write(this.buffer);
      } catch (e) {
        console.log('targetSocket.write error: ${e}');
      }
    }
  }

  private isHttps() {
    return this.request['method'].toLowerCase() == 'connect';
  }

  private onTimeout() {
    this.socket.end();
  }

  private onSocketCloseEvent() {
    this.emitter.emit(P2PEvents.onTargetSocketEnd);
  }
  private onSocketErrorEvent(error) {
    console.log('TargetSocket -> onTargetWebsiteError', error);
    console.log('last packet -> ', this.lastPacket.toString());
    this.emitter.emit(P2PEvents.onTargetWebsiteError, null, error);
  }

  private onSocketDataEvent(buffer) {

    // writeToSocket(this.requestHandlerSocket, buffer);
  }
}
