import { P2PService, P2PEvents } from '../services/P2P.service';

export class PeerService {
  private USE_REMOTE_SERVER = false;
  async init() {
    console.info(this.USE_REMOTE_SERVER ? 'Using Remote Socket Server' : ' Using Local Socket Server');
    const p2p = new P2PService({
      ip: this.USE_REMOTE_SERVER ? '207.246.82.69': 'localhost',
      port: 7070,
      socketReqHandlerPort: 7072,
      peerId: 'adir',
      userId: 'user123',
      token: 'testingToken',
    });

    p2p.emitter.on(P2PEvents.onConnectionEstablished, (_info) => {
      console.log('onConnectionEstablished');
    });
    p2p.emitter.on(P2PEvents.onSocketConnectionFailed, (_info) => {
      console.log('onSocketConnectionFailed');
    });
    p2p.emitter.on(P2PEvents.onBeforeStartSocketConnection, (_info) => {
      console.log('onBeforeStartSocketConnection');
    });
    p2p.emitter.on(P2PEvents.onServerCloseSocketConnection, (_info) => {
      console.log('onServerCloseSocketConnection');
    });
    p2p.emitter.on(P2PEvents.onSocketConnectionClose, (_info) => {
      console.log('onSocketConnectionClose');
      setTimeout(() => {
        this.init()
      }, 7000)
    });
    p2p.emitter.on(P2PEvents.onConnectionToServerFailed, (_info) => {
      console.log('onConnectionToServerFailed');
    });
    p2p.emitter.on(P2PEvents.onReceiveData, (_info) => {
      console.log('onReceiveData');
    });
    p2p.emitter.on(P2PEvents.onSocketClose, (_info) => {
      console.log('onSocketClose');
    });

    await p2p.startSocketConnection();
  }
}

const peerService = new PeerService();

try {
  peerService
    .init()
    .then()
    .catch((e) => {
      console.log('e ;', e);
    });
} catch (e) {
  console.log('e', e);
}
